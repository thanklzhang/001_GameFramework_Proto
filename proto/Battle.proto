syntax="proto3";
package NetProto;

import "Common.proto";


message BattleEntityProto
{
	int32 guid = 1;
	int32 configId = 2;
	int32 playerIndex = 3;
	
	repeated BattleSkillProto skillInitList = 4;
	
	Vector3Proto position = 5;
	int32 level = 6;
	int32 maxHp = 7;
	int32 currHp = 8;
	
}

//通知战斗创建
message csNotifyCreateBattle
{
	
}

message scNotifyCreateBattle
{
	BattleInitArg battleInitArg = 1;
}

// 战斗初始化信息 ///////////////////////////////////////////////////
message BattleInitArg
{
	//战斗 guid
	int32 guid = 1;
	//战斗 表配置 id
	int32 tableId = 2;
	//战斗所属 center server 中 room id
	int32 roomId = 3;
	//所有战斗玩家的初始信息
	BattlePlayerInitArg battlePlayerInitArg = 4;
	//所有实体信息
	BattleEntityInitArg entityInitArg = 5;
	//地图信息(暂时不用)
	//BattleMapInitArg mapInitArg = 6;
	
	
}

message BattlePlayerProto
{
	int32 playerIndex = 1;
	int32 team = 2;
	int32 uid = 3;
	int32 ctrlHeroGuid = 4;
}

message BattlePlayerInitArg
{
	repeated BattlePlayerProto playerList = 1;
}

message BattleMapInitArg
{
	
}

message BattleEntityInitArg
{
	repeated BattleEntityProto battleEntityInitList = 1;
}

message BattleSkillProto
{
	int32 configId = 1;
	int32 level = 2;
}


/////////////////////////////////////////////////////////////////////

//上报自己加载进度 理论上应该是异步消息 只是通知下进度
message csPlayerLoadProgress
{
	int32 progress = 1;//进度 千分比
}

message scPlayerLoadProgress
{
	int32 err = 1;
}

//所有人加载好了
message csNotifyAllPlayerLoadFinish
{
	
}

message scNotifyAllPlayerLoadFinish
{
	int32 err = 1;
}

//战前准备完成
message csBattleReadyFinish
{
	
}

message scBattleReadyFinish
{
	int32 err = 1;
}

//战斗开始
message csNotifyBattleStart
{
	
}

message scNotifyBattleStart
{
	int32 err = 1;
}

////////////////////////////-----玩家操作 start

//移动单位
message csMoveEntity
{
	int32 guid = 1;
	Vector3Proto targetPos = 2;
}

message scMoveEntity
{
	int32 err = 1;
}

//使用技能
message csUseSkill
{
	int32 guid = 1;
	int32 skillId = 2;
	Vector3Proto targetPos = 3;
	int32 targetGuid = 4;
}

message scUseSkill
{
	int32 err = 1;
}

//发送剧情结束(由于剧情银每个玩家不一致 所以现在方案时强行等待所有玩家剧情结束)
message csClientPlotEnd
{
	
}

message scClientPlotEnd
{
	int32 err = 1;
}



////////////////////////////-----玩家操作 end

////////////////////////////-----服务端发来的关键战斗事件 start


//服务端通知 创建多个单位实体
message scNotifyCreateEntities
{
	repeated BattleEntityProto battleEntities = 1;
}

//服务端通知 有单位实体开始移动
message scNotifyEntityMove
{
	int32 guid = 1;
	Vector3Proto startPos = 2;
	Vector3Proto endPos = 3;
	int32 moveSpeed = 4;//* 1000
}

//服务端通知 有单位实体停止移动
message scNotifyEntityStopMove
{
	int32 guid = 1;
	Vector3Proto endPos = 2;
}

//服务端通知 有单位使用技能
message scNotifyEntityUseSkill
{
	int32 guid = 1;
	int32 resId = 2;
	
}

//服务端通知 有技能效果创建
message scNotifyCreateSkillEffect
{
	int32 guid = 1;
	int32 resId = 2;
	Vector3Proto position = 3;
	//跟随的实体 id 一般 buff 都会一直跟随
	int32 followEntityGuid = 4;
}

//服务端通知 有技能效果开始移动
message scNotifySkillEffectStartMove
{
	int32 effectGuid = 1;
	Vector3Proto startPos = 2;//创建的时候已经赋值了 所以这个没有用 先预留
	Vector3Proto targetPos = 3;
	int32 targetGuid = 4;
	bool isFollow = 5;//实际上 如果 targetGuid 不为 0 那么一定跟随 这个应该就是 true 所以 这个目前貌似没有用 待定
	int32 moveSpeed = 6;
}

//服务端通知 有技能效果销毁
message scNotifySkillEffectDestroy
{
	int32 effectGuid = 1;
}

message BattleEntityValueProto
{
	// 1 当前生命值, 2 当前法力值
	int32 type = 1;
	int32 value = 2;
}

//同步实体数据值
message scNotifySyncEntityValue
{
	int32 entityGuid = 1;
	repeated BattleEntityValueProto values = 2;
	
}

message BattleEntityAttrProto
{
	int32 type = 1;
	int32 value = 2;
}
//同步实体属性
message scNotifySyncEntityAttr
{
	int32 entityGuid = 1;
	repeated BattleEntityAttrProto attrs = 2;
	
}

//有实体死亡
message scNotifyEntityDead
{
	int32 entityGuid = 1;
}

//服务器通知 播放剧情
message scNotifyPlayPlot
{
	string plotName = 1;
}

//服务器通知 剧情结束(所有玩家)
message scNotifyPlotEnd
{
	
}

//服务器通知 隐藏 entity 显示
message scNotifySetEntityShowState
{
	repeated int32 guids = 1;
	bool isShow = 2;
}


//通知战斗结束
message scNotifyBattleEnd
{
	int32 isWin = 1;
}

////////////////////////////-----服务端发来的关键战斗事件 end


//转发战斗协议给战斗服务器(输入)
message csTransitionBattle
{
	int32 cmd = 1;
	bytes data = 2;
}
message scTransitionBattle
{
	int32 err = 1;
}

//转发战斗协议给玩家(输出)
message csTransitionBattle2Player
{
	
}
message scTransitionBattle2Player
{
	int32 cmd = 1;
	bytes data = 2;
}















